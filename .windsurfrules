
  üß≠ Next.js + React + TypeScript Code & UI Guidelines (Minimalist Web)
üìÅ Project Structure
Use the app/ directory with the App Router (Next.js 13+).

Use lowercase-dash-case for directories (e.g., components/auth-form).

Favor named exports for all components and utilities.

Organize code by feature/domain (e.g., features/auth, features/dashboard).

‚öôÔ∏è TypeScript
Enable strict mode in tsconfig.json.

Use interfaces over type aliases.

Avoid enums; use object maps or unions.

Always type component props with interfaces.

‚öõÔ∏è React & Next.js
Use functional components and hooks only.

Use React Server Components (RSC) where possible.

Prefer derived props over local state.

Use Context + useReducer for global state.

Use Zustand for scalable state management.

Use react-query or SWR for client-side data fetching.

Use Next.js data fetching (e.g., generateStaticParams, getServerSideProps) as needed.

üßº Code Style
Use Prettier and ESLint with TypeScript and Next.js presets.

Use the function keyword for utility functions.

Use concise conditional rendering syntax.

Use descriptive variable names (e.g., isLoading, hasError, shouldRender).

Avoid unnecessary curly braces or verbose JSX.

üé® UI & Design
Minimalist aesthetic: white space, clean typography, soft shadows, neutral colors.

Use Tailwind CSS or Shadcn/UI for styling.

Use responsive grid and flex layouts (grid, flex, gap-*).

Use large rounded corners (rounded-xl, rounded-2xl).

Keep components modular and reusable.

‚ö° Performance
Use dynamic imports and React.lazy for non-critical components.

Optimize images with next/image.

Use memoization: memo(), useMemo, useCallback.

Load fonts using next/font.

üß™ Testing
Use Jest for unit tests.

Use React Testing Library for component testing.

Use Cypress or Playwright for E2E testing.

Prefer snapshot tests for static presentational components only.

üîç SEO & Accessibility
Use Next.js metadata (App Router) or <Head> (Pages Router).

Use semantic HTML tags (<main>, <section>, etc.).

Ensure keyboard navigation and screen reader compatibility.

Generate sitemaps with next-sitemap.

üß† Developer Best Practices
Use absolute imports (@/components/...) via tsconfig.json.

Keep components small and focused on a single responsibility.

Stick to conventions over custom abstractions.

Modularize logic and UI layers; avoid repetition.
‚ÄúA clean, modular storyboard layout designed for film production teams, blending visual previews with concise cinematographic direction. The minimalist aesthetic supports clarity, while the flow-based card system enables intuitive storytelling and collaborative editing.‚Äù

  Safe Area Management
  - Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
  - Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
  - Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
  - Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

  Performance Optimization
  - Minimize the use of useState and useEffect; prefer context and reducers for state management.
  - Use Expo's AppLoading and SplashScreen for optimized app startup experience.
  - Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
  - Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
  - Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.
  - Use dynamic routes with expo-router for better navigation handling.

  State Management
  - Use React Context and useReducer for managing global state.
  - Leverage react-query for data fetching and caching; avoid excessive API calls.
  - For complex state management, consider using Zustand or Redux Toolkit.
  - Handle URL search parameters using libraries like expo-linking.
  Testing
  - Write unit tests using Jest and React Native Testing Library.
  - Implement integration tests for critical user flows using Detox.
  - Use Expo's testing tools for running tests in different environments.
  - Consider snapshot testing for components to ensure UI consistency.


    